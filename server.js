require('dotenv').config();
var ping = require('ping');
const express = require('express');
const cors = require("cors");
const cron = require('node-cron');
const moment = require('moment-timezone'); 
const { Client } = require('@elastic/elasticsearch');
const axios = require('axios'); 

const app = express();
const PORT = process.env.PORT || 5004;

// üìå ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Elasticsearch
const esClient = new Client({
    node: 'http://10.2.114.76:9200',
    auth: {
        username: process.env.ELASTIC_USER || 'elastic',
        password: process.env.ELASTIC_PASS || 'changeme'
    }
});


const DISCORD_WEBHOOK_URL = process.env.DISCORD_WEBHOOK_URL || 'https://discord.com/api/webhooks/1349302327655272448/ZaFUL9MZ4dqxiBw7PYsJrJDtmkN12ydL1696eEpH_2PcV9EgLgEKbqQmx0aTScJH7lKB';

// üìå ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á Ping
const hosts = [
    '192.168.1.1', '192.168.1.11', '192.168.1.6', 
    '192.168.1.18', '192.168.1.9', '192.168.2.34'
];

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô ISO 8601
function getISOTime() {
    return moment().tz("Asia/Bangkok").toISOString();
}


async function sendToDiscord(host, alive, retryCount = 0) {
    try {
        const statusText = alive ? "‚úÖ UP" : "‚ùå DOWN";
        const color = alive ? 3066993 : 15158332; // ‡∏™‡∏µ: ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (UP) / ‡πÅ‡∏î‡∏á (DOWN)
        
        const message = {
            username: "Server Monitor",
            embeds: [
                {
                    title: "üîç Server Status Update",
                    description: `üîπ **Host:** \`${host}\`\nüîπ **Status:** **${statusText}**\nüîπ **Time:** ${getISOTime()}`,
                    color: color
                }
            ]
        };

        const response = await axios.post(DISCORD_WEBHOOK_URL, message);
        if (response.status === 204) {
            console.log(`üì© Sent to Discord: ${host} - ${statusText}`);
        } else {
            throw new Error(`Unexpected response from Discord: ${response.status}`);
        }
    } catch (error) {
        console.error(`‚ùå Error sending to Discord (Retry ${retryCount}):`, error.message);
        
        // ‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á retry limit (3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
        if (retryCount < 3) {
            console.log("‚ôªÔ∏è Retrying...");
            await new Promise(res => setTimeout(res, 2000)); // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            return sendToDiscord(host, alive, retryCount + 1);
        }
    }
}

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Elasticsearch
async function logToElasticsearch(host, alive, retryCount = 0) {
    try {
        const timestamp = getISOTime(); 
        await esClient.index({
            index: 'server_status',
            body: {
                timestamp: timestamp,
                host: host,
                alive: alive
            }
        });
        console.log(`üìå Logged to Elasticsearch: ${host} - Alive: ${alive} - Time: ${timestamp}`);
    } catch (error) {
        console.error(`‚ùå Error logging to Elasticsearch (Retry ${retryCount}):`, error.message);
        
        // ‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á retry limit (3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
        if (retryCount < 3) {
            console.log("‚ôªÔ∏è Retrying...");
            await new Promise(res => setTimeout(res, 2000)); // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            return logToElasticsearch(host, alive, retryCount + 1);
        }
    }
}

// üìå ‡∏ï‡∏±‡πâ‡∏á Cron Job ‡πÉ‡∏´‡πâ Ping ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
cron.schedule('*/5 * * * *', async () => {
    console.log(`üîÑ Running Scheduled Ping at ${getISOTime()}`);

    for (let host of hosts) {
        let rs = await ping.promise.probe(host);
        await logToElasticsearch(rs.host, rs.alive);
        await sendToDiscord(rs.host, rs.alive);
    }

    console.log(`‚úÖ Finished Scheduled Ping at ${getISOTime()}`);
});

// üìå API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ping ‡πÅ‡∏ö‡∏ö Manual
app.get('/ping', async (req, res) => {
    console.log(`üì¢ Manual Ping Requested at ${getISOTime()}`);
    let results = [];
    
    for (let host of hosts) {
        let rs = await ping.promise.probe(host);
        await logToElasticsearch(rs.host, rs.alive);
        await sendToDiscord(rs.host, rs.alive);
        results.push(rs);
    }

    res.json({ results });
});

// üìå ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
app.listen(PORT, () => {
    console.log(`‚úÖ Server is running on port: ${PORT}`);
});
